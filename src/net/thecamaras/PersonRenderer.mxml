<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////////
//    
//    Copyright 2008 Ross Camara
//
//    This file is part of Addressbook.
//
//    Foobar is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    AddressBook is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
//
///////////////////////////////////////////////////////////////////////////////
-->
<mx:Text 
    xmlns:mx="http://www.adobe.com/2006/mxml" 
    creationComplete="init()" link="linkHandler(event)" 
    width="100%" height="100" styleName="Renderer">
    
    <mx:Script>
        <![CDATA[
            import flash.net.navigateToURL;
            import mx.formatters.DateFormatter;
            import mx.utils.ObjectUtil;
            import net.thecamaras.models.BaseModel;
            import net.thecamaras.models.Person;
            import mx.binding.utils.BindingUtils;
            private static const SPACE:String = " ";
            private static const NEWLINE:String = "<br>";
            
            private static const DATE_DISPLAY:DateFormatter = new DateFormatter();
            DATE_DISPLAY.formatString = "MMMM D, YYYY"; 
        
            private var _source:XML = null;
            
            [Bindable]
            public function get source():XML{
                return _source;
            }
            
            public function set source(arg:XML):void{
                if (arg.name() != 'Person'){
                    throw new Error("Not a valid xml snippet");
                }
                this._source = arg;
            }
            
            private function updateText(value:String):void{
                if (source == null){
                    return;
                }
                
                var results:String = "";
                var linecount:int = 1;
                
                if (source.@title != ""){
                    results += source.@title + SPACE;
                }
                results += source.@firstname + SPACE + source.@lastname + NEWLINE;
                if (source.@email != ""){
                    results += "<u><a href='event:mailto:"+source.@email+"'>"+source.@email+"</a></u>" + NEWLINE;
                    linecount++;
                }
                
                if (source.@cell != ""){
                    results += "Cell: " + BaseModel.PHONE_FORMATER.format(source.@cell) + NEWLINE;
                    linecount++;
                }
                
                if (source.@birth != ""){   
                    results += DATE_DISPLAY.format(new Date(Date.parse(source.@birth))) + NEWLINE;
                    linecount++;
                }

                this.htmlText = results;
                
                var tdim:TextLineMetrics = determineTextFormatFromStyles().measureText(results);
                var lineHeight:Number = tdim.height;                
                this.height = linecount * lineHeight + tdim.leading*linecount;
            }
            
            private function init():void{
                BindingUtils.bindSetter(updateText, this, "source");
            }
            
            private function linkHandler(e:TextEvent):void{
                trace("opening email link");
                navigateToURL(new URLRequest(e.text), '_blank')
            }
        ]]>
    </mx:Script>
</mx:Text>
