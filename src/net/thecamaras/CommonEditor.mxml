<?xml version="1.0" encoding="utf-8"?>
<mx:VBox 
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:thecamaras="net.thecamaras.*"
    label="New" 
    paddingRight="10" paddingBottom="10" paddingLeft="10">
    
    <mx:Style >        
        .Title {
            font-size:30;
            text-align:center;
        }
        
        .DetailTitle {
            font-size:13;
            text-align:center;
        }
        
        .DetailRenderer {
            font-size:16;
            text-align:center;
            padding-top:20;
            padding-left:20;
            padding-right:20;
            padding-bottom:20;
        }
        
        .ChildRenderer{
            font-size:13;
            text-align:center;
        }
    </mx:Style>

    <mx:Script >
        <![CDATA[
            import mx.events.PropertyChangeEvent;
            import mx.binding.utils.BindingUtils;
            import mx.rpc.events.AbstractEvent;
            import mx.core.UIComponent;
            import net.thecamaras.models.BaseModel;
            import mx.messaging.messages.IMessage;
            import mx.rpc.events.FaultEvent;
            import mx.events.CloseEvent;
            import mx.utils.ObjectUtil;
            import net.thecamaras.models.Person;
            import mx.controls.Alert;
            
            [Bindable]
            protected var editor:IEditor;
            
            [Bindable] protected var titleText:String = "New Thing";

            public function setId (id:int):void{
                if (!initialized){
                    this.busyContainer.enabled = false;
                }
                this.label = "loading..";
                
                BindingUtils.bindSetter(enableSave, editor, "dirty");
                saveBtn.enabled = false; 
            }
            
            private function enableSave(e:Boolean):void{
                saveBtn.enabled = e;
            }
            
            protected function loadModel (xml:XML):void{
               // does nothing by default
            }
            
            
            /**
             * User requests the closing of this people editor. 
             */ 
            protected function close():void{
                if (editor.dirty){
                    Alert.show("You have unsaved changes. Do you wish to close?", "Close", 
                    Alert.OK | Alert.CANCEL, this, doClose, null, Alert.CANCEL);     
                }
                else{
                    doClose(new CloseEvent(CloseEvent.CLOSE, false, false, Alert.OK));
                }
            }
            
            protected function doClose(e:CloseEvent):void{
                if (e.detail != Alert.OK){
                        return;
                    }
                    
                    // Should probally fire an event requesting close
                    this.parent.removeChild(this);
            }
            
            /**
             * User has requested a save to happen. Reads out all the values from the person
             * editor and sends them to the service call. 
             */  
            protected function save():void{
                var validation:String;
                validation = editor.validate();
                if (validation != ""){
                    Alert.show("Unable to save: Invalid values in the detail fields\n\n" + validation, 
                               "Error Saving..."); 
                    return;
                }
                var args:Object = new Object();
                args = buildSaveRequest();
                Connection.instance.send2("address.php", args, saveComplete, saveFailed);
                this.busyContainer.enabled = false;
            }
            
            protected function buildSaveRequest():Object{
                throw new Error("This method should have een overwritten");
            }
            
            /**
             * Handle a succesfull save completion request. 
             */  
            protected function saveComplete(result:XML):void{
                loadModel(result);
                editor.dirty = false;
                saveBtn.enabled = false;
            }
            
            /**
             * Custom handler to handle a failed save attempt. 
             */  
            protected function saveFailed(event:FaultEvent):void{
                var msg:IMessage = IMessage(event.message);
                Alert.show(ObjectUtil.toString(msg.body), "Error saving");
            }
        ]]>
    </mx:Script>
    
    <mx:Label id="nameHeader" 
            styleName="Title" 
            text="{titleText}" width="100%">
            
    </mx:Label>
    <mx:HDividedBox id="busyContainer" 
        height="90%" width="100%">
        <mx:VDividedBox width="50%" height="100%">
            <mx:TitleWindow id="displayBox" 
                title="Current Details" titleStyleName="DetailTitle" styleName="DetailRenderer" 
                width="100%" height="40%">
            </mx:TitleWindow>
            <mx:VBox id="childListing"
                styleName="ChildRenderer"
                width="100%" height="60%">
            </mx:VBox>
        </mx:VDividedBox>
    </mx:HDividedBox>
    <mx:HBox id="buttonBar"
        width="100%" horizontalAlign="right">
        <mx:Button id="saveBtn" label="save" click="save();" />
        <mx:Button id="closeBtn" label="close" click="close();"/>
    </mx:HBox>
</mx:VBox>
