<?xml version="1.0" encoding="utf-8"?>
<camara:AbstractListing
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:camara="net.thecamaras.*" 
    creationComplete="addColumns()"
    preinitialize="preInitializeHandler()">
    
    <mx:Script>
        <![CDATA[
            import mx.formatters.DateFormatter;
            import net.thecamaras.events.CreateEditorEvent;
            import net.thecamaras.models.Place;
            import net.thecamaras.models.Person;
            import mx.validators.EmailValidator;
            import net.thecamaras.events.OpenEditorEvent;
            import mx.collections.IHierarchicalCollectionView;
            import mx.utils.ObjectUtil;
            import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
            import mx.controls.AdvancedDataGrid;
            import mx.collections.HierarchicalData;
            import mx.events.DynamicEvent;
        
            import mx.rpc.events.ResultEvent;
            import mx.controls.Alert;
            
            private function preInitializeHandler():void{
                addLabel = "New Person";
            }
            
            protected function addColumns():void{
                var columns:Array = new Array();                
                var col:AdvancedDataGridColumn;
                
                col = new AdvancedDataGridColumn("");
                col.resizable = false;
                col.sortable = false;
                columns.push(col);
                
                col = new AdvancedDataGridColumn("First Name");
                col.wordWrap = false;
                col.labelFunction = displayName;
                col.dataField = "@name";
                col.sortCompareFunction = sortByName;
                col.sortable = true;
                columns.push(col);
                
                col = new AdvancedDataGridColumn("Last Name");
                col.wordWrap = false;
                col.dataField = "@lastname";
                columns.push(col);
                
                col = new AdvancedDataGridColumn("Birth Date");
                col.wordWrap = false;
                col.dataField = "@birth";
                col.labelFunction = dateDisplay;
                col.sortCompareFunction = birthSort;
                col.setStyle("textAlign", "center");
                columns.push(col);
                
                col = new AdvancedDataGridColumn("Cell Phone");
                col.dataField = "@cell";
                col.labelFunction = cellDisplay;
                col.setStyle("textAlign", "center");
                columns.push(col);
                
                col = new AdvancedDataGridColumn("Comments");
                col.wordWrap = false;
                col.dataField = "@details";
                col.dataTipField = "@details";
                columns.push(col);
                 
                var width:Number;
                width = listingTable.width;
                columns[0].width = 50;
                width -= columns[0].width;
                columns[1].width = width * .20;
                columns[2].width = width * .20;
                columns[3].width = width * .15;
                columns[4].width = width * .15;
                columns[5].width = width * .30;
                
                listingTable.columns = columns;
                listingTable.treeColumn = columns[0];
                listingTable.invalidateSize();
            }
            
            override public function refreshModels():void {
                super.refreshModels();
                var args:Object = new Object();
                args.method = "ListPeople";
                Connection.instance.send("address.php", args, populate); 
            }
            
            override protected function populate(xml:XML):void {
                super.populate(xml);
                modelList.childrenField = "Places";
            }
            
            override protected function newItemRequest(event:Event):void{
                this.dispatchEvent(new CreateEditorEvent(TYPE_PERSON));
            }
            
            override protected function displayName(item:Object, column:AdvancedDataGridColumn):String{
                var xml:XML = XML(item);
                
                if (xml.name() == TYPE_PERSON){
                    return xml.@firstname;
                }
                return super.displayName(item, column);
            }
            
            
            protected function cellDisplay(item:Object, column:AdvancedDataGridColumn):String{
                var xml:XML = XML(item);
                
                if (xml.name() == TYPE_PLACE){
                    return "";
                }
                    
                if (xml.@cell == ""){
                    return "";
                }
            
                return Person.PHONE_FORMATER.format(xml.@cell);
            }

            private static const DATE_FORMAT:DateFormatter = new DateFormatter();
            DATE_FORMAT.formatString = "MMM DD, YYYY";
            protected function dateDisplay(item:Object, column:AdvancedDataGridColumn):String{
                var xml:XML = XML(item);
                
                if (xml.name() == TYPE_PLACE){
                    return "";
                }
                    
                if (xml.@birth == ""){
                    return "";
                }
            
                return DATE_FORMAT.format(new Date(Date.parse(xml.@birth)));
            }
            
            
            private static const COMPARE_DATE_FORMAT:DateFormatter = new DateFormatter();
            COMPARE_DATE_FORMAT.formatString = "MMDDYYYY";
            protected function birthSort(obj1:Object, obj2:Object): int {
                var xml:XML = XML(obj1);
                var xml2:XML = XML(obj2);
                var d1:Date;
                var d2:Date;
               
                if (xml.name() == TYPE_PLACE){
                    if (xml2.name() == TYPE_PLACE){
                        // string compare the location name
                        return ObjectUtil.stringCompare(xml.@name, xml2.@name, true);                   
                    }          
                    return 1; // item2 is a person
                }
                else {
                    if (xml2.name() == TYPE_PLACE){
                        return -1;// item2 is a location                        
                    }
                    // String compare the first name of the two people
                    
                    if (xml.@birth == "" && xml2.@birth == ""){
                        return 0;
                    }
                    
                    if (xml.@birth == "" || xml2.@birth == ""){
                        ObjectUtil.stringCompare(xml.@birth, xml2.@birth, true);
                    }
                    
                    d1 = new Date(Date.parse(xml.@birth));
                    d2 = new Date(Date.parse(xml2.@birth));
                    
                    return ObjectUtil.stringCompare(COMPARE_DATE_FORMAT.format(d1), 
                                                    COMPARE_DATE_FORMAT.format(d1),
                                                    true);
                }
            }
        ]]>
    </mx:Script>
    
    
</camara:AbstractListing>

